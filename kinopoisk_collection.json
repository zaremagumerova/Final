{
	"info": {
		"_postman_id": "057791f8-852c-4e70-aa4a-6da27905fb68",
		"name": "Kinopoisk_Coursework",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41759727",
		"_collection_link": "https://grey-comet-257987.postman.co/workspace/%D0%9A%D1%83%D1%80%D1%81%D0%BE%D0%B2%D0%B0%D1%8F-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-3-~80ff3279-6fe1-45e8-a14e-fc546402b571/collection/41759727-057791f8-852c-4e70-aa4a-6da27905fb68?action=share&source=collection_link&creator=41759727"
	},
	"item": [
		{
			"name": "Позитивные проверки",
			"item": [
				{
					"name": "Поиск фильма по жанру и году",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Успех, статус: 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Содержание соответствует запросу\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Проверяем, что docs является массивом и не пустой",
									"    pm.expect(jsonData.docs).to.be.an('array').that.is.not.empty;",
									"    ",
									"    // Проверяем наличие года 2024 и жанра 'криминал' во всех элементах массива",
									"    var allMatch = jsonData.docs.every(function(doc) {",
									"        var yearMatch = doc.year === 2024;",
									"        var genreMatch = doc.genres && doc.genres.some(function(genre) {",
									"            return genre.name.toLowerCase() === 'криминал';",
									"        });",
									"        return yearMatch && genreMatch;",
									"    });",
									"    ",
									"    pm.expect(allMatch).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/movie?year=2024&genres.name=криминал&limit=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"movie"
							],
							"query": [
								{
									"key": "year",
									"value": "2024"
								},
								{
									"key": "genres.name",
									"value": "криминал"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск фильма по нескольким жанрам и году",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Успех, статус: 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Содержание соответствует запросу\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Проверяем, что docs является массивом и не пустой",
									"    pm.expect(jsonData.docs).to.be.an('array').that.is.not.empty;",
									"    ",
									"    // Проверяем наличие года и жанров во всех элементах массива",
									"   var allMatch = jsonData.docs.every(function(doc) {",
									"        var yearMatch = doc.year === 2024;",
									"        var genreMatch = doc.genres && ",
									"            doc.genres.some(genre => genre.name.toLowerCase() === 'триллер') &&",
									"            doc.genres.some(genre => genre.name.toLowerCase() === 'драма');",
									"        return yearMatch && genreMatch;",
									"    });",
									"    ",
									"    pm.expect(allMatch).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/movie?genres.name=%2Bтриллер&genres.name=%2Bдрама&year=2024&limit=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"movie"
							],
							"query": [
								{
									"key": "genres.name",
									"value": "%2Bтриллер",
									"description": "%2B обозначает символ + включить"
								},
								{
									"key": "genres.name",
									"value": "%2Bдрама",
									"description": "%21 обозначает ! исключить"
								},
								{
									"key": "year",
									"value": "2024"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск фильма только по одному жанру",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Успех, статус: 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Содержание соответствует запросу\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Проверяем, что docs является массивом и не пустой",
									"    pm.expect(jsonData.docs).to.be.an('array').that.is.not.empty;",
									"    ",
									"    // Проверяем наличие жанра во всех элементах массива",
									"   var match = jsonData.docs.every(function(doc) {",
									"        var genreMatch = doc.genres && ",
									"            doc.genres.some(genre => genre.name.toLowerCase() === 'боевик');",
									"        return genreMatch;",
									"    });",
									"    ",
									"    pm.expect(match).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/movie?genres.name=боевик&limit=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"movie"
							],
							"query": [
								{
									"key": "genres.name",
									"value": "боевик"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск по типу",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Успех, статус: 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Содержание соответствует запросу\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Проверяем, что docs является массивом и не пустой",
									"    pm.expect(jsonData.docs).to.be.an('array').that.is.not.empty;",
									"    ",
									"    // Проверяем наличие типа во всех элементах массива",
									"    var matchType = jsonData.docs.every(function(doc) {",
									"        return doc.type.toLowerCase() === 'cartoon';",
									"    });",
									"    ",
									"    pm.expect(matchType).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/movie?type=cartoon&limit=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"movie"
							],
							"query": [
								{
									"key": "type",
									"value": "cartoon"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Негативные проверки",
			"item": [
				{
					"name": "Поиск фильма с невалидным жанром",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Тип контента - JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Структура ответа корректна\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('docs');",
									"    pm.expect(jsonData.docs).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Список фильмов пуст\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.docs).to.be.empty;",
									"});",
									"",
									"pm.test(\"Общее количество результатов равно нулю\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData.total).to.equal(0);",
									"});",
									"",
									"pm.test(\"Количество страниц равно нулю\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('pages');",
									"    pm.expect(jsonData.pages).to.equal(0);",
									"});",
									"",
									"pm.test(\"Лимит соответствует запросу\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('limit');",
									"    // Здесь предполагается, что лимит по умолчанию равен 10. ",
									"    // Если это не так, замените 10 на фактическое значение по умолчанию.",
									"    pm.expect(jsonData.limit).to.equal(10);",
									"});",
									"",
									"pm.test(\"Текущая страница равна 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('page');",
									"    pm.expect(jsonData.page).to.equal(1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/movie?genres.name=invalid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"movie"
							],
							"query": [
								{
									"key": "genres.name",
									"value": "invalid"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск фильма с невалидным годом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Тип контента - JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Структура ответа об ошибке корректна\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData).to.have.property('statusCode');",
									"});",
									"",
									"pm.test(\"Сообщение об ошибке корректно\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.an('array');",
									"    pm.expect(jsonData.message[0]).to.equal(\"Значение поля year должно быть в диапазоне от 1874 до 2050!\");",
									"});",
									"",
									"pm.test(\"Тип ошибки указан как 'Bad Request'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.equal(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"Код статуса в теле ответа соответствует 400\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.statusCode).to.equal(400);",
									"});",
									"",
									"pm.test(\"Год в запросе меньше минимально допустимого\", function () {",
									"    var year = parseInt(pm.request.url.query.get(\"year\"));",
									"    pm.expect(year).to.be.below(1874);",
									"});",
									"",
									"pm.test(\"Год в запросе не превышает максимально допустимый\", function () {",
									"    var year = parseInt(pm.request.url.query.get(\"year\"));",
									"    pm.expect(year).to.not.be.above(2050);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/movie?year=1323",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"movie"
							],
							"query": [
								{
									"key": "year",
									"value": "1323"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск фильма с годом из будущего в пределах диапазона",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Тип контента - JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Структура ответа корректна\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('docs');",
									"    pm.expect(jsonData.docs).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Список фильмов пуст\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.docs).to.be.empty;",
									"});",
									"",
									"pm.test(\"Общее количество результатов равно нулю\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData.total).to.equal(0);",
									"});",
									"",
									"pm.test(\"Количество страниц равно нулю\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('pages');",
									"    pm.expect(jsonData.pages).to.equal(0);",
									"});",
									"",
									"pm.test(\"Лимит соответствует запросу\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('limit');",
									"    // Здесь предполагается, что лимит по умолчанию равен 10. ",
									"    // Если это не так, замените 10 на фактическое значение по умолчанию.",
									"    pm.expect(jsonData.limit).to.equal(10);",
									"});",
									"",
									"pm.test(\"Текущая страница равна 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('page');",
									"    pm.expect(jsonData.page).to.equal(1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/movie?year=2050",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"movie"
							],
							"query": [
								{
									"key": "year",
									"value": "2050"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск фильма с пустым запросом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API возвращает результаты при пустом запросе\", function () {",
									"    // Проверка статуса и типа контента",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"",
									"    // Проверка структуры ответа",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.all.keys('docs', 'total', 'limit', 'page', 'pages');",
									"",
									"    // Проверка, что результаты возвращаются даже при пустом запросе",
									"    pm.expect(jsonData.docs).to.be.an('array').that.is.not.empty;",
									"    pm.expect(jsonData.total).to.be.above(0);",
									"",
									"    console.log(\"Внимание: API возвращает \" + jsonData.total + \" результатов при пустом запросе.\");",
									"",
									"    // Проверка значений пагинации",
									"    pm.expect(jsonData.limit).to.be.a('number').and.to.be.above(0);",
									"    pm.expect(jsonData.page).to.equal(1);",
									"    pm.expect(jsonData.pages).to.be.a('number').and.to.be.above(0);",
									"",
									"    // Проверка соответствия pages, total и limit",
									"    var expectedPages = Math.ceil(jsonData.total / jsonData.limit);",
									"    pm.expect(jsonData.pages).to.equal(expectedPages);",
									"",
									"    // Проверка, что количество элементов в docs не превышает limit",
									"    pm.expect(jsonData.docs.length).to.be.at.most(jsonData.limit);",
									"",
									"    // Базовая проверка структуры первого элемента в docs",
									"    if (jsonData.docs.length > 0) {",
									"        var firstDoc = jsonData.docs[0];",
									"        pm.expect(firstDoc).to.have.property('id');",
									"        pm.expect(firstDoc).to.have.property('name');",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/movie/search?query=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"movie",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск фильма с пустым жанром",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Тип контента - JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Структура ответа корректна\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('docs');",
									"    pm.expect(jsonData.docs).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Список фильмов пуст\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.docs).to.be.empty;",
									"});",
									"",
									"pm.test(\"Общее количество результатов равно нулю\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData.total).to.equal(0);",
									"});",
									"",
									"pm.test(\"Количество страниц равно нулю\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('pages');",
									"    pm.expect(jsonData.pages).to.equal(0);",
									"});",
									"",
									"pm.test(\"Лимит соответствует запросу\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('limit');",
									"    // Здесь предполагается, что лимит по умолчанию равен 10. ",
									"    // Если это не так, замените 10 на фактическое значение по умолчанию.",
									"    pm.expect(jsonData.limit).to.equal(10);",
									"});",
									"",
									"pm.test(\"Текущая страница равна 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('page');",
									"    pm.expect(jsonData.page).to.equal(1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/movie?genres.name=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"movie"
							],
							"query": [
								{
									"key": "genres.name",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск фильма с не поддерживаемым методом POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа",
									"pm.test(\"Статус ответа должен быть 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Проверка типа контента",
									"pm.test(\"Тип контента должен быть JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"// Проверка структуры тела ответа",
									"pm.test(\"Тело ответа должно содержать корректную структуру\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData).to.have.property('statusCode');",
									"});",
									"",
									"// Проверка содержимого сообщения об ошибке",
									"pm.test(\"Сообщение об ошибке должно указывать на невозможность выполнения POST запроса\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain(\"Cannot POST\");",
									"});",
									"",
									"// Проверка типа ошибки",
									"pm.test(\"Тип ошибки должен быть 'Not Found'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.equal(\"Not Found\");",
									"});",
									"",
									"// Проверка кода статуса в теле ответа",
									"pm.test(\"Код статуса в теле ответа должен быть 404\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.statusCode).to.equal(404);",
									"});",
									"",
									"// Проверка времени ответа",
									"pm.test(\"Время ответа не должно превышать 500мс\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/movie/search?",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"movie",
								"search"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{api_token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-API-KEY",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://api.kinopoisk.dev/v1.4",
			"type": "string"
		},
		{
			"key": "api_token",
			"value": "VFH6RN7-BZWMJSH-GVDHE7R-5ET1PFQ",
			"type": "string"
		}
	]
}